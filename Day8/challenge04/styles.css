@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;700&family=Roboto:wght@400;700&display=swap');

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Roboto', sans-serif;
}

/* UTILITY STYLES START */
.btn {
    display: inline-block;
    padding: 0.9em 2.5em;
    text-transform: uppercase;
    outline: none;
    border: none;
    font-size: 1.2rem;
    font-weight: 700;
    letter-spacing: 2px;
    border-radius: 50px;
    transition: all 150ms ease-in;
    margin: 1rem;
    margin-left: 0;
}

.btn:hover,
.btn:focus {
    background: #22b8cf;
    color: #fff;
    letter-spacing: 3px;
}

.btn-primary {
    background: #38CFD9;
}

.purple {
    color: #87629A;
}

.lightgreen {
    background-color: #136C72;
}

.textWhite {
    color: #FFF;
}

h1 {
    font-size: 3.2rem;
    /* We are resetting the CSS, hence we need to setup margin every time at element styles level. */
    margin-bottom: 0.4em;
}

h2 {
    font-size: 2rem;
    margin-bottom: 0.4em;
}

p {
    font-size: 1.2rem;
    line-height: 1.8;
    margin-bottom: 3em;
}

.row {
    /* display: flex => flex container is parent */
    display: flex;

    gap: 30px;
}

.col {

    /* To force the flex-item to NOT shrink based on content */
    /* width: 100%; */

    /*
    flex-grow : 1;    ➜ The div will grow in same proportion as the window-size
    flex-shrink : 1;  ➜ The div will shrink in same proportion as the window-size
    flex-basis : 0;   ➜ The div does not have a starting value as such and will
                     take up screen as per the screen size available for
                     e.g:- if 3 divs are in the wrapper then each div will take 33%.
    */
    /* flex: 1; */
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0;

    text-align: center;
}
/*
Another approach to add gap b/w flex items using combinator selectors.
.col + .col {
    margin-left: 30px;
}
*/


/* UTILITY STYLES END */

.showcase {
    background-color: #23424A;
    color: #fff;
    /* When we are using showcase along with container to restrict the max-width we do not need to setup the padding left and right */
    padding: 9.3em 0;
}

.container {
    width: 90%;
    max-width: 1250px;
    margin: 0 auto;
}

.main-content {
    width: 60%;
}

.section {
    padding: 4em 0;
}

@media(max-width: 1000px) {

    .showcase {
        padding: 5em 0;
    }

    .main-content {
        width: 100%;
        text-align: center;
    }
}
